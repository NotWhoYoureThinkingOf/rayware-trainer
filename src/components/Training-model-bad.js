/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from "react";
import styles from "../styles/ModelOptions.module.css";
import { useGLTF, OrbitControls, TransformControls } from "@react-three/drei";
import { useDrag } from "react-use-gesture";
import { useThree } from "@react-three/fiber";
import { Controls, useControl } from "react-three-gui";
import { useSpring, a } from "@react-spring/three";
import { useDispatch, useSelector } from "react-redux";
import {
  grabModelSelected,
  releaseModelSelected,
  selectModelSelected,
} from "../features/modelSelectedSlice";
import {
  releaseModelImported,
  selectModelImported,
} from "../features/modelImportedSlice";
import { Html } from "@react-three/drei";
// import KeyboardEventHandler from "react-keyboard-event-handler";

export default function Model(props) {
  const [selected, setSelected] = useState(false);
  const [mouseDown, setMouseDown] = useState(false);
  const dispatch = useDispatch();
  const selectedModel = useSelector(selectModelSelected);
  const importedModel = useSelector(selectModelImported);
  const orbit = useRef();
  const group = useRef();
  const badModel = useRef();
  const transform = useRef();
  const { nodes, materials } = useGLTF("/training-model-bad.glb");
  const [orbital, setOrbital] = useState(true);
  const [position, setPosition] = useState([0, 0.4, 0]);
  const { size, viewport } = useThree();
  const aspect = size.width / viewport.width;
  const mode = useControl("mode", {
    type: "select",
    items: ["translate", "rotate"],
  });

  const bind = useDrag(
    ({ offset: [x, y] }) => {
      const [, , z] = position;
      setPosition([0, 0.4, 0]);
    },
    { pointerEvents: true }
  );

  const modelProps = useSpring({
    color: selected ? "#35a5ff" : "#8989a1",
  });

  useEffect(() => {
    dispatch(releaseModelSelected());
  }, []);

  const chooseModel = () => {
    if (selected === true) {
      setSelected(false);
      dispatch(releaseModelSelected());
    } else {
      setSelected(true);
      dispatch(grabModelSelected());
    }
  };

  const deleteModel = () => {
    if (selected) {
      setSelected(false);
      dispatch(releaseModelImported());
    }
  };

  console.log("selected", selected);
  console.log("redux selected", selectedModel);
  console.log("imported", importedModel);
  console.log("mousedown", mouseDown);

  useEffect(() => {
    if (transform.current) {
      const controls = transform.current;
      controls.setMode("rotate");
      const callback = (event) => (orbit.current.enabled = !event.value);
      controls.addEventListener("dragging-changed", callback);
      return () => controls.removeEventListener("dragging-changed", callback);
    }
  });

  // can find a way to change controls.setMode("rotate") or ("translate"). refer to https://reactjs.org/docs/events.html#mouse-events onMouseDown and onMouseUp most likely

  // console.log(orbital);

  return (
    <group ref={group} {...props} dispose={null}>
      <TransformControls ref={transform}>
        <a.mesh
          onClick={chooseModel}
          position={position}
          {...bind()}
          ref={badModel}
          geometry={nodes["Training-Model-Bad"].geometry}
          material={nodes["Training-Model-Bad"].material}
          material-color={modelProps.color}
          material-roughness={0.75}
          // position={[0, 1.3, -1]}
          rotation={[-1.51, 0, -4]}
          scale={[1 / 3, 1 / 3, 1 / 3]}
          // onClick={() => setOrbital(false)}
        >
          {selected && (
            <Html>
              <div className={styles.modelOptions}>
                <p>BASE</p>
                <p>COPY</p>
                <p>RESET</p>
              </div>
            </Html>
          )}
        </a.mesh>
        {/* <ambientLight /> */}
        {/* {orbital && <OrbitControls />} */}
      </TransformControls>
      <OrbitControls ref={orbit} />
      {/* <KeyboardEventHandler
        handleKeys={["del"]}
        onKeyEvent={(key, e) => deleteModel()}
        handleEventType={"keydown"}
      /> */}
    </group>
  );
}

useGLTF.preload("/training-model-bad.glb");
